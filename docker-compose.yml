networks:
  wallpaperio-net:

services:
  redis:
    image: redis:7.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - wallpaperio-net

  # Milvus dependencies
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./data/milvus_data/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - wallpaperio-net

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./data/milvus_data/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - wallpaperio-net

  # Official Milvus standalone
  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.6.0-rc1
    # platform: linux/arm64
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MILVUS_USERNAME: ${MILVUS_USERNAME}
      MILVUS_PASSWORD: ${MILVUS_PASSWORD}
    volumes:
      - ./data/milvus_data/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - wallpaperio-net
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  attu:
    image: zilliz/attu:latest
    # platform: linux/arm64
    ports:
      - "8000:3000"
    environment:
      - MILVUS_URL=milvus:19530
      - MILVUS_USERNAME=${MILVUS_USERNAME}
      - MILVUS_PASSWORD=${MILVUS_PASSWORD}
    depends_on:
      - milvus
    restart: unless-stopped
    networks:
      - wallpaperio-net

  celery_worker:
    build: 
      context: ./server_generator
      dockerfile: Dockerfile.celery
    command: celery -A celery_config.celery_app worker --loglevel=info --concurrency=1
    volumes:
      - ./server_generator:/app
      - ./server_generator/static:/app/static
    env_file:
      - ./server_generator/.env.prod
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - wallpaperio-net

  python_generator_server:
    build:
      context: ./server_generator
      dockerfile: Dockerfile.server
    ports:
      - "5001:5001"
    volumes:
      - ./server_generator:/app
      - ./server_generator/static:/app/static
    depends_on:
      - redis
      - go_server
    restart: unless-stopped
    env_file:
      - ./server_generator/.env.prod
    networks:
      - wallpaperio-net

  postgres:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    restart: unless-stopped
    networks:
      - wallpaperio-net

  go_server:
    container_name: go_server
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - ./server/.env.prod
    networks:
      - wallpaperio-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - wallpaperio-net

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - go_server
      - frontend
    restart: unless-stopped
    networks:
      - wallpaperio-net
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

volumes:
  redis_data:
  milvus_data:
    driver: local
  postgres_data:
  etcd_data:
    driver: local
  minio_data:
    driver: local 